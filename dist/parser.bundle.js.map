{
    "version": 3,
    "sources": [
        "node_modules/browser-pack/_prelude.js",
        "node_modules/find-insert-index/index.js",
        "node_modules/mergesort/index.js",
        "node_modules/strscan/lib/strscan.js",
        "node_modules/tree-model/index.js",
        "src/wad/parser.js"
    ],
    "names": [],
    "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClvnSA;AACA;AACA",
    "file": "parser.bundle.js",
    "sourceRoot": "",
    "sourcesContent": [
        "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
        "module.exports = (function () {\n  'use strict';\n\n  /**\n   * Find the index to insert an element in array keeping the sort order.\n   *\n   * @param {function} comparatorFn The comparator function which sorted the array.\n   * @param {array} arr The sorted array.\n   * @param {object} el The element to insert.\n   */\n  function findInsertIndex(comparatorFn, arr, el) {\n    var i, len;\n    for (i = 0, len = arr.length; i < len; i++) {\n      if (comparatorFn(arr[i], el) > 0) {\n        break;\n      }\n    }\n    return i;\n  }\n\n  return findInsertIndex;\n})();\n",
        "module.exports = (function () {\n  'use strict';\n\n  /**\n   * Sort an array using the merge sort algorithm.\n   *\n   * @param {function} comparatorFn The comparator function.\n   * @param {array} arr The array to sort.\n   * @returns {array} The sorted array.\n   */\n  function mergeSort(comparatorFn, arr) {\n    var len = arr.length, firstHalf, secondHalf;\n    if (len >= 2) {\n      firstHalf = arr.slice(0, len / 2);\n      secondHalf = arr.slice(len / 2, len);\n      return merge(comparatorFn, mergeSort(comparatorFn, firstHalf), mergeSort(comparatorFn, secondHalf));\n    } else {\n      return arr.slice();\n    }\n  }\n\n  /**\n   * The merge part of the merge sort algorithm.\n   *\n   * @param {function} comparatorFn The comparator function.\n   * @param {array} arr1 The first sorted array.\n   * @param {array} arr2 The second sorted array.\n   * @returns {array} The merged and sorted array.\n   */\n  function merge(comparatorFn, arr1, arr2) {\n    var result = [], left1 = arr1.length, left2 = arr2.length;\n    while (left1 > 0 && left2 > 0) {\n      if (comparatorFn(arr1[0], arr2[0]) <= 0) {\n        result.push(arr1.shift());\n        left1--;\n      } else {\n        result.push(arr2.shift());\n        left2--;\n      }\n    }\n    if (left1 > 0) {\n      result.push.apply(result, arr1);\n    } else {\n      result.push.apply(result, arr2);\n    }\n    return result;\n  }\n\n  return mergeSort;\n})();\n",
        "(function() {\n  var StringScanner;\n  ((typeof exports !== \"undefined\" && exports !== null) ? exports : this).StringScanner = (function() {\n    StringScanner = function(source) {\n      this.source = source.toString();\n      this.reset();\n      return this;\n    };\n    StringScanner.prototype.scan = function(regexp) {\n      var matches;\n      return (matches = regexp.exec(this.getRemainder())) && matches.index === 0 ? this.setState(matches, {\n        head: this.head + matches[0].length,\n        last: this.head\n      }) : this.setState([]);\n    };\n    StringScanner.prototype.scanUntil = function(regexp) {\n      var matches;\n      if (matches = regexp.exec(this.getRemainder())) {\n        this.setState(matches, {\n          head: this.head + matches.index + matches[0].length,\n          last: this.head\n        });\n        return this.source.slice(this.last, this.head);\n      } else {\n        return this.setState([]);\n      }\n    };\n    StringScanner.prototype.scanChar = function() {\n      return this.scan(/[\\s\\S]/);\n    };\n    StringScanner.prototype.skip = function(regexp) {\n      if (this.scan(regexp)) {\n        return this.match.length;\n      }\n    };\n    StringScanner.prototype.skipUntil = function(regexp) {\n      if (this.scanUntil(regexp)) {\n        return this.head - this.last;\n      }\n    };\n    StringScanner.prototype.check = function(regexp) {\n      var matches;\n      return (matches = regexp.exec(this.getRemainder())) && matches.index === 0 ? this.setState(matches) : this.setState([]);\n    };\n    StringScanner.prototype.checkUntil = function(regexp) {\n      var matches;\n      if (matches = regexp.exec(this.getRemainder())) {\n        this.setState(matches);\n        return this.source.slice(this.head, this.head + matches.index + matches[0].length);\n      } else {\n        return this.setState([]);\n      }\n    };\n    StringScanner.prototype.peek = function(length) {\n      return this.source.substr(this.head, (typeof length !== \"undefined\" && length !== null) ? length : 1);\n    };\n    StringScanner.prototype.getSource = function() {\n      return this.source;\n    };\n    StringScanner.prototype.getRemainder = function() {\n      return this.source.slice(this.head);\n    };\n    StringScanner.prototype.getPosition = function() {\n      return this.head;\n    };\n    StringScanner.prototype.hasTerminated = function() {\n      return this.head === this.source.length;\n    };\n    StringScanner.prototype.getPreMatch = function() {\n      if (this.match) {\n        return this.source.slice(0, this.head - this.match.length);\n      }\n    };\n    StringScanner.prototype.getMatch = function() {\n      return this.match;\n    };\n    StringScanner.prototype.getPostMatch = function() {\n      if (this.match) {\n        return this.source.slice(this.head);\n      }\n    };\n    StringScanner.prototype.getCapture = function(index) {\n      return this.captures[index];\n    };\n    StringScanner.prototype.reset = function() {\n      return this.setState([], {\n        head: 0,\n        last: 0\n      });\n    };\n    StringScanner.prototype.terminate = function() {\n      return this.setState([], {\n        head: this.source.length,\n        last: this.head\n      });\n    };\n    StringScanner.prototype.concat = function(string) {\n      return this.source += string;\n    };\n    StringScanner.prototype.unscan = function() {\n      if (this.match) {\n        return this.setState([], {\n          head: this.last,\n          last: 0\n        });\n      } else {\n        throw \"nothing to unscan\";\n      }\n    };\n    StringScanner.prototype.setState = function(matches, values) {\n      var _a, _b;\n      this.head = (typeof (_a = ((typeof values === \"undefined\" || values === null) ? undefined : values.head)) !== \"undefined\" && _a !== null) ? _a : this.head;\n      this.last = (typeof (_b = ((typeof values === \"undefined\" || values === null) ? undefined : values.last)) !== \"undefined\" && _b !== null) ? _b : this.last;\n      this.captures = matches.slice(1);\n      return (this.match = matches[0]);\n    };\n    return StringScanner;\n  })();\n})();\n",
        "var mergeSort, findInsertIndex;\nmergeSort = require('mergesort');\nfindInsertIndex = require('find-insert-index');\n\nmodule.exports = (function () {\n  'use strict';\n\n  var walkStrategies;\n\n  walkStrategies = {};\n\n  function k(result) {\n    return function () {\n      return result;\n    };\n  }\n\n  function TreeModel(config) {\n    config = config || {};\n    this.config = config;\n    this.config.childrenPropertyName = config.childrenPropertyName || 'children';\n    this.config.modelComparatorFn = config.modelComparatorFn;\n  }\n\n  function addChildToNode(node, child) {\n    child.parent = node;\n    node.children.push(child);\n    return child;\n  }\n\n  function Node(config, model) {\n    this.config = config;\n    this.model = model;\n    this.children = [];\n  }\n\n  TreeModel.prototype.parse = function (model) {\n    var i, childCount, node;\n\n    if (!(model instanceof Object)) {\n      throw new TypeError('Model must be of type object.');\n    }\n\n    node = new Node(this.config, model);\n    if (model[this.config.childrenPropertyName] instanceof Array) {\n      if (this.config.modelComparatorFn) {\n        model[this.config.childrenPropertyName] = mergeSort(\n          this.config.modelComparatorFn,\n          model[this.config.childrenPropertyName]);\n      }\n      for (i = 0, childCount = model[this.config.childrenPropertyName].length; i < childCount; i++) {\n        addChildToNode(node, this.parse(model[this.config.childrenPropertyName][i]));\n      }\n    }\n    return node;\n  };\n\n  function hasComparatorFunction(node) {\n    return typeof node.config.modelComparatorFn === 'function';\n  }\n\n  Node.prototype.isRoot = function () {\n    return this.parent === undefined;\n  };\n\n  Node.prototype.hasChildren = function () {\n    return this.children.length > 0;\n  };\n\n  function addChild(self, child, insertIndex) {\n    var index;\n\n    if (!(child instanceof Node)) {\n      throw new TypeError('Child must be of type Node.');\n    }\n\n    child.parent = self;\n    if (!(self.model[self.config.childrenPropertyName] instanceof Array)) {\n      self.model[self.config.childrenPropertyName] = [];\n    }\n\n    if (hasComparatorFunction(self)) {\n      // Find the index to insert the child\n      index = findInsertIndex(\n        self.config.modelComparatorFn,\n        self.model[self.config.childrenPropertyName],\n        child.model);\n\n      // Add to the model children\n      self.model[self.config.childrenPropertyName].splice(index, 0, child.model);\n\n      // Add to the node children\n      self.children.splice(index, 0, child);\n    } else {\n      if (insertIndex === undefined) {\n        self.model[self.config.childrenPropertyName].push(child.model);\n        self.children.push(child);\n      } else {\n        if (insertIndex < 0 || insertIndex > self.children.length) {\n          throw new Error('Invalid index.');\n        }\n        self.model[self.config.childrenPropertyName].splice(insertIndex, 0, child.model);\n        self.children.splice(insertIndex, 0, child);\n      }\n    }\n    return child;\n  }\n\n  Node.prototype.addChild = function (child) {\n    return addChild(this, child);\n  };\n\n  Node.prototype.addChildAtIndex = function (child, index) {\n    if (hasComparatorFunction(this)) {\n      throw new Error('Cannot add child at index when using a comparator function.');\n    }\n\n    return addChild(this, child, index);\n  };\n\n  Node.prototype.setIndex = function (index) {\n    if (hasComparatorFunction(this)) {\n      throw new Error('Cannot set node index when using a comparator function.');\n    }\n\n    if (this.isRoot()) {\n      if (index === 0) {\n        return this;\n      }\n      throw new Error('Invalid index.');\n    }\n\n    if (index < 0 || index >= this.parent.children.length) {\n      throw new Error('Invalid index.');\n    }\n\n    var oldIndex = this.parent.children.indexOf(this);\n\n    this.parent.children.splice(index, 0, this.parent.children.splice(oldIndex, 1)[0]);\n\n    this.parent.model[this.parent.config.childrenPropertyName]\n      .splice(index, 0, this.parent.model[this.parent.config.childrenPropertyName].splice(oldIndex, 1)[0]);\n\n    return this;\n  };\n\n  Node.prototype.getPath = function () {\n    var path = [];\n    (function addToPath(node) {\n      path.unshift(node);\n      if (!node.isRoot()) {\n        addToPath(node.parent);\n      }\n    })(this);\n    return path;\n  };\n\n  Node.prototype.getIndex = function () {\n    if (this.isRoot()) {\n      return 0;\n    }\n    return this.parent.children.indexOf(this);\n  };\n\n  /**\n   * Parse the arguments of traversal functions. These functions can take one optional\n   * first argument which is an options object. If present, this object will be stored\n   * in args.options. The only mandatory argument is the callback function which can\n   * appear in the first or second position (if an options object is given). This\n   * function will be saved to args.fn. The last optional argument is the context on\n   * which the callback function will be called. It will be available in args.ctx.\n   *\n   * @returns Parsed arguments.\n   */\n  function parseArgs() {\n    var args = {};\n    if (arguments.length === 1) {\n      if (typeof arguments[0] === 'function') {\n        args.fn = arguments[0];\n      } else {\n        args.options = arguments[0];\n      }\n    } else if (arguments.length === 2) {\n      if (typeof arguments[0] === 'function') {\n        args.fn = arguments[0];\n        args.ctx = arguments[1];\n      } else {\n        args.options = arguments[0];\n        args.fn = arguments[1];\n      }\n    } else {\n      args.options = arguments[0];\n      args.fn = arguments[1];\n      args.ctx = arguments[2];\n    }\n    args.options = args.options || {};\n    if (!args.options.strategy) {\n      args.options.strategy = 'pre';\n    }\n    if (!walkStrategies[args.options.strategy]) {\n      throw new Error('Unknown tree walk strategy. Valid strategies are \\'pre\\' [default], \\'post\\' and \\'breadth\\'.');\n    }\n    return args;\n  }\n\n  Node.prototype.walk = function () {\n    var args;\n    args = parseArgs.apply(this, arguments);\n    walkStrategies[args.options.strategy].call(this, args.fn, args.ctx);\n  };\n\n  walkStrategies.pre = function depthFirstPreOrder(callback, context) {\n    var i, childCount, keepGoing;\n    keepGoing = callback.call(context, this);\n    for (i = 0, childCount = this.children.length; i < childCount; i++) {\n      if (keepGoing === false) {\n        return false;\n      }\n      keepGoing = depthFirstPreOrder.call(this.children[i], callback, context);\n    }\n    return keepGoing;\n  };\n\n  walkStrategies.post = function depthFirstPostOrder(callback, context) {\n    var i, childCount, keepGoing;\n    for (i = 0, childCount = this.children.length; i < childCount; i++) {\n      keepGoing = depthFirstPostOrder.call(this.children[i], callback, context);\n      if (keepGoing === false) {\n        return false;\n      }\n    }\n    keepGoing = callback.call(context, this);\n    return keepGoing;\n  };\n\n  walkStrategies.breadth = function breadthFirst(callback, context) {\n    var queue = [this];\n    (function processQueue() {\n      var i, childCount, node;\n      if (queue.length === 0) {\n        return;\n      }\n      node = queue.shift();\n      for (i = 0, childCount = node.children.length; i < childCount; i++) {\n        queue.push(node.children[i]);\n      }\n      if (callback.call(context, node) !== false) {\n        processQueue();\n      }\n    })();\n  };\n\n  Node.prototype.all = function () {\n    var args, all = [];\n    args = parseArgs.apply(this, arguments);\n    args.fn = args.fn || k(true);\n    walkStrategies[args.options.strategy].call(this, function (node) {\n      if (args.fn.call(args.ctx, node)) {\n        all.push(node);\n      }\n    }, args.ctx);\n    return all;\n  };\n\n  Node.prototype.first = function () {\n    var args, first;\n    args = parseArgs.apply(this, arguments);\n    args.fn = args.fn || k(true);\n    walkStrategies[args.options.strategy].call(this, function (node) {\n      if (args.fn.call(args.ctx, node)) {\n        first = node;\n        return false;\n      }\n    }, args.ctx);\n    return first;\n  };\n\n  Node.prototype.drop = function () {\n    var indexOfChild;\n    if (!this.isRoot()) {\n      indexOfChild = this.parent.children.indexOf(this);\n      this.parent.children.splice(indexOfChild, 1);\n      this.parent.model[this.config.childrenPropertyName].splice(indexOfChild, 1);\n      this.parent = undefined;\n      delete this.parent;\n    }\n    return this;\n  };\n\n  return TreeModel;\n})();\n",
        "var TreeModel = require('tree-model');\nvar StrScan = require('strscan').StringScanner;\n"
    ]
}