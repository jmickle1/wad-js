!function(g){var I={};function C(A){if(I[A])return I[A].exports;var n=I[A]={i:A,l:!1,exports:{}};return g[A].call(n.exports,n,n.exports,C),n.l=!0,n.exports}C.m=g,C.c=I,C.d=function(g,I,A){C.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:A})},C.r=function(g){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},C.t=function(g,I){if(1&I&&(g=C(g)),8&I)return g;if(4&I&&"object"==typeof g&&g&&g.__esModule)return g;var A=Object.create(null);if(C.r(A),Object.defineProperty(A,"default",{enumerable:!0,value:g}),2&I&&"string"!=typeof g)for(var n in g)C.d(A,n,function(I){return g[I]}.bind(null,n));return A},C.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return C.d(I,"a",I),I},C.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},C.p="",C(C.s=0)}([function(module,exports){eval("console.log('hello');\n\n// TODO: Send the error string in postMessage\n\nonmessage = (message) => {\n    const { wadId, lumpId, data } = message.data;\n\n    console.log(`Converting '${lumpId}' from MUS to MIDI (WAD: '${wadId}') ...`);\n\n    // MUS event codes\n    const mus_releasekey = 0x00;\n    const mus_presskey = 0x10;\n    const mus_pitchwheel = 0x20;\n    const mus_systemevent = 0x30;\n    const mus_changecontroller = 0x40;\n    const mus_scoreend = 0x60;\n\n    // MIDI event codes\n    const midi_releasekey = 0x80;\n    const midi_presskey = 0x90;\n    const midi_aftertouchkey = 0xA0;\n    const midi_changecontroller = 0xB0;\n    const midi_changepatch = 0xC0;\n    const midi_aftertouchchannel = 0xD0;\n    const midi_pitchwheel = 0xE0;\n\n    // Structure to hold MUS file header\n    const musheader = {\n        id: [],\n        scorelength: null,\n        scorestart: null,\n        primarychannels: null,\n        secondarychannels: null,\n        instrumentcount: null,\n    };\n\n    // Standard MIDI type 0 header + track header\n    /*\n    const uint8_t midiheader[] =\n    {\n        'M', 'T', 'h', 'd',     // Main header\n        0x00, 0x00, 0x00, 0x06, // Header size\n        0x00, 0x00,             // MIDI type (0)\n        0x00, 0x01,             // Number of tracks\n        0x00, 0x46,             // Resolution\n        'M', 'T', 'r', 'k',     // Start of track\n        0x00, 0x00, 0x00, 0x00  // Placeholder for track length\n    };\n    */\n    // ^ this is the standard first 22 bytes of the midi output, aside from adding the track length.\n    // I should create a function that adds this data manually with the DataView\n    function writeMidiHeader() {\n        const midiHeaderData = ['M'.charCodeAt(0), 'T'.charCodeAt(0), 'h'.charCodeAt(0), 'd'.charCodeAt(0), // Main header\n            0x00, 0x00, 0x00, 0x06, // Header size\n            0x00, 0x00, // MIDI type (0)\n            0x00, 0x01, // Number of tracks\n            0x00, 0x46, // Resolution\n        'M'.charCodeAt(0), 'T'.charCodeAt(0), 'r'.charCodeAt(0), 'k'.charCodeAt(0), // Start of track\n            0x00, 0x00, 0x00, 0x00, // Placeholder for track length\n        ];\n\n        writeData(midiHeaderData);\n    }\n\n    let musDataView;\n    let musDataPosition;\n\n    // Constants\n    const NUM_CHANNELS = 16;\n    const MUS_PERCUSSION_CHAN = 15;\n    const MIDI_PERCUSSION_CHAN = 9;\n    const MIDI_TRACKLENGTH_OFS = 18;\n\n    // Cached channel velocities\n    const channelvelocities = [127, 127, 127, 127, 127, 127, 127, 127,\n        127, 127, 127, 127, 127, 127, 127, 127];\n\n    // Timestamps between sequences of MUS events\n    let queuedtime = 0;\n\n    // Counter for the length of the track\n    let tracksize;\n\n    const controller_map = [0x00, 0x20, 0x01, 0x07, 0x0A, 0x0B, 0x5B, 0x5D,\n        0x40, 0x43, 0x78, 0x7B, 0x7E, 0x7F, 0x79];\n\n    const channel_map = [];\n\n    // Main DataView for writing to. This is used by writeData();\n    let outputDataView;\n\n    // Wrapper function to work like slade's memchunk.write()\n    // I'm so lazy\n    let position = 0;\n    let dataToWrite = [];\n    function writeData(bytes) {\n        dataToWrite = dataToWrite.concat(bytes);\n    }\n\n    function confirmWrite() {\n        const newBuffer = new ArrayBuffer(dataToWrite.length);\n        outputDataView = new DataView(newBuffer);\n        // Then write the data\n        for (let i = 0; i < dataToWrite.length; i++) {\n            outputDataView.setUint8(position, dataToWrite[i]);\n            position += 1;\n        }\n    }\n\n    // Write timestamp to a MIDI file.\n    function writeTime(time) {\n        let buffer = time & 0x7F;\n        let writeval;\n\n        while ((time >>= 7) != 0) {\n            buffer <<= 8;\n            buffer |= ((time & 0x7F) | 0x80);\n        }\n\n        for (; ;) {\n            writeval = (buffer & 0xFF);\n\n            writeData([writeval]);\n\n            tracksize += 1;\n\n            if ((buffer & 0x80) != 0) { buffer >>= 8; } else {\n                queuedtime = 0;\n                return;\n            }\n        }\n    }\n\n    // Write the end of track marker\n    function writeEndTrack() {\n        const endtrack = [0xFF, 0x2F, 0x00];\n\n        writeTime(queuedtime);\n\n        writeData(endtrack);\n\n        tracksize += 3;\n    }\n\n    // Write a key press event\n    function writePressKey(channel, key, velocity) {\n        // Write queued time\n        writeTime(queuedtime);\n\n        // Write pressed key and channel\n        let working = midi_presskey | channel;\n        writeData([working]);\n\n        // Write key\n        working = key & 0x7F;\n        writeData([working]);\n\n        // Wite velocity\n        working = velocity & 0x7F;\n        writeData([working]);\n\n        tracksize += 3;\n    }\n\n    // Write a key release event\n    function writeReleaseKey(channel, key) {\n        // Write queued time\n        writeTime(queuedtime);\n\n        // Write released key\n        let working = midi_releasekey | channel;\n        writeData([working]);\n\n        // Write key\n        working = key & 0x7F;\n        writeData([working]);\n\n        // Dummy\n        working = 0;\n        writeData([working]);\n\n        tracksize += 3;\n    }\n\n    // Write a pitch wheel/bend event\n    function writePitchWheel(channel, wheel) {\n        // Write queued time\n        writeTime(queuedtime);\n\n        let working = midi_pitchwheel | channel;\n        writeData([working]);\n\n        working = wheel & 0x7F;\n        writeData([working]);\n\n        working = (wheel >> 7) & 0x7F;\n        writeData([working]);\n\n        tracksize += 3;\n    }\n\n    // Write a patch change event\n    function writeChangePatch(channel, patch) {\n        // Write queued time\n        writeTime(queuedtime);\n\n        let working = midi_changepatch | channel;\n        writeData([working]);\n\n        working = patch & 0x7F;\n        writeData([working]);\n\n        tracksize += 2;\n    }\n\n    // Write a valued controller change event\n    function writeChangeController_Valued(channel, control, value) {\n        // Write queued time\n        writeTime(queuedtime);\n\n        let working = midi_changecontroller | channel;\n        writeData([working]);\n\n        working = control & 0x7F;\n        writeData([working]);\n\n        // Quirk in vanilla DOOM? MUS controller values should be 7-bit, not 8-bit.\n        working = value & 0x80 ? 0x7F : value;\n        writeData([working]);\n\n        tracksize += 3;\n    }\n\n    // Write a valueless controller change event\n    function writeChangeController_Valueless(channel, control) {\n        writeChangeController_Valued(channel, control, 0);\n    }\n\n    // Allocate a free MIDI channel.\n    function allocateMIDIChannel() {\n        let result;\n        let max;\n        let i;\n\n        // Find the current highest-allocated channel.\n\n        max = -1;\n\n        for (i = 0; i < NUM_CHANNELS; ++i) {\n            if (channel_map[i] > max) {\n                max = channel_map[i];\n            }\n        }\n\n        // max is now equal to the highest-allocated MIDI channel.  We can\n        // now allocate the next available channel.  This also works if\n        // no channels are currently allocated (max=-1)\n\n        result = max + 1;\n\n        // Don't allocate the MIDI percussion channel!\n\n        if (result === MIDI_PERCUSSION_CHAN) {\n            ++result;\n        }\n\n        return result;\n    }\n\n    // Given a MUS channel number, get the MIDI channel number to use in the outputted file.\n    function getMIDIChannel(mus_channel) {\n        // Find the MIDI channel to use for this MUS channel.\n        // MUS channel 15 is the percusssion channel.\n\n        if (mus_channel === MUS_PERCUSSION_CHAN) {\n            return MIDI_PERCUSSION_CHAN;\n        }\n\n        // If a MIDI channel hasn't been allocated for this MUS channel\n        // yet, allocate the next free MIDI channel.\n\n        if (channel_map[mus_channel] === -1) {\n            channel_map[mus_channel] = allocateMIDIChannel();\n        }\n\n        return channel_map[mus_channel];\n    }\n\n    function readMusHeader(dataView) {\n        const output = Object.create(musheader);\n\n        for (let i = 0; i < 4; i++) {\n            output.id.push(dataView.getUint8(i));\n        }\n        output.scorelength = dataView.getUint16(4, true);\n        output.scorestart = dataView.getUint16(6, true);\n        output.primarychannels = dataView.getUint16(8, true);\n        output.secondarychannels = dataView.getUint16(10, true);\n        output.instrumentcount = dataView.getUint16(12, true);\n\n        return output;\n    }\n\n    function convertMusToMidi(musinput) {\n        // master dataview for input mus\n        musDataView = musinput;\n        musDataPosition = 0;\n        const startTime = Date.now();\n\n        function getMusByte8() {\n            const output = musDataView.getUint8(musDataPosition);\n            musDataPosition += 1;\n            // console.log(output);\n            return output;\n        }\n\n        // master data for output midi\n        const outputArrayBuffer = new ArrayBuffer(0);\n        outputDataView = new DataView(outputArrayBuffer);\n\n        // Descriptor for the current MUS event\n        let eventdescriptor;\n        let channel; // Channel number\n        let mus_event;\n\n\n        // Bunch of vars read from MUS lump\n        let key;\n        let controllernumber;\n        let controllervalue;\n\n        // Flag for when the score end marker is hit.\n        let hitscoreend = 0;\n\n        // Temp working byte\n        let working;\n        // Used in building up time delays\n        let timedelay;\n\n        // Initialise channel map to mark all channels as unused.\n        for (channel = 0; channel < NUM_CHANNELS; ++channel) {\n            channel_map[channel] = -1;\n        }\n\n        // Grab the header\n        const musfileheader = readMusHeader(musDataView);\n        // Check MUS header\n        if (musfileheader.id[0] !== 'M'.charCodeAt(0) || musfileheader.id[1] !== 'U'.charCodeAt(0)\n            || musfileheader.id[2] !== 'S'.charCodeAt(0) || musfileheader.id[3] !== 0x1A) {\n            console.error('Invalid MUS header.');\n            return false;\n        }\n\n        // Seek to where the data is held\n        musDataPosition = musfileheader.scorestart;\n        // So, we can assume the MUS file is faintly legit. Let's start writing MIDI data...\n\n        writeMidiHeader();\n        tracksize = 0;\n\n        // Now, process the MUS file:\n        while (hitscoreend === 0) {\n            // Handle a block of events:\n\n            while (hitscoreend === 0) {\n                // Fetch channel number and event code:\n                eventdescriptor = getMusByte8();\n\n\n                channel = getMIDIChannel(eventdescriptor & 0x0F);\n                mus_event = eventdescriptor & 0x70;\n                switch (mus_event) {\n                    case mus_releasekey:\n                        // console.log('mus_releasekey');\n                        key = getMusByte8();\n\n                        writeReleaseKey(channel, key);\n\n                        break;\n\n                    case mus_presskey:\n                        key = getMusByte8();\n\n                        if (key & 0x80) {\n                            channelvelocities[channel] = getMusByte8();\n\n                            channelvelocities[channel] &= 0x7F;\n\n                            // console.log('mus_presskey: '+key+ ' ' + channelvelocities[channel]);\n                        } else {\n                            // console.log('mus_presskey: '+key);\n                        }\n\n                        writePressKey(channel, key, channelvelocities[channel]);\n\n                        break;\n\n                    case mus_pitchwheel:\n                        // console.log('mus_pitchwheel');\n                        key = getMusByte8();\n\n                        writePitchWheel(channel, key * 64);\n\n                        break;\n\n                    case mus_systemevent:\n                        // console.log('mus_systemevent');\n                        controllernumber = getMusByte8();\n\n                        if (controllernumber < 10 || controllernumber > 14) {\n                            console.error(`Controller number inaccurate 10-14: ${controllernumber}`);\n                            return false;\n                        }\n\n                        writeChangeController_Valueless(channel, controller_map[controllernumber]);\n\n                        break;\n\n                    case mus_changecontroller:\n                        controllernumber = getMusByte8();\n                        controllervalue = getMusByte8();\n                        // console.log('mus_changecontroller: ' +controllernumber+' '+controllervalue);\n                        if (controllernumber == 0) {\n                            writeChangePatch(channel, controllervalue);\n                        } else {\n                            if (controllernumber < 1 || controllernumber > 9) {\n                                console.error(`Controller number inaccurate: ${controllernumber}`);\n                                return false;\n                            }\n\n                            writeChangeController_Valued(channel, controller_map[controllernumber], controllervalue);\n                        }\n\n                        break;\n\n                    case mus_scoreend:\n                        // console.log('mus_scoreend');\n                        hitscoreend = 1;\n                        break;\n\n                    default:\n                        // console.log('eventdescriptor default: '+eventdescriptor + ' ' + (eventdescriptor & 0x80));\n                        return false;\n                }\n                if ((eventdescriptor & 0x80) != 0) {\n                    // console.log('delay count');\n                    break;\n                }\n            }\n            // Now we need to read the time code:\n            if (hitscoreend === 0) {\n                // console.log('read time code');\n                timedelay = 0;\n                // delayCounter = 0;\n                for (; ;) {\n                    working = getMusByte8();\n                    // delayCounter += 1;\n                    timedelay = timedelay * 128 + (working & 0x7F);\n                    if ((working & 0x80) == 0) { break; }\n                }\n                // console.log('delay count: '+delayCounter + ' time delay: ' + timedelay)\n                queuedtime += timedelay;\n            }\n        }\n        console.log(`Converted '${lumpId}' from MUS to MIDI (WAD: '${wadId}').`);\n        // End of track\n        writeEndTrack();\n\n        confirmWrite();\n\n        // Write the track size into the stream\n        outputDataView.setUint8(MIDI_TRACKLENGTH_OFS + 0, (tracksize >> 24) & 0xff);\n        outputDataView.setUint8(MIDI_TRACKLENGTH_OFS + 1, (tracksize >> 16) & 0xff);\n        outputDataView.setUint8(MIDI_TRACKLENGTH_OFS + 2, (tracksize >> 8) & 0xff);\n        outputDataView.setUint8(MIDI_TRACKLENGTH_OFS + 3, tracksize & 0xff);\n\n        return outputDataView.buffer;\n    }\n\n    const masterOutput = convertMusToMidi(data);\n    if (masterOutput === false) {\n        console.error(`Failed to convert '${lumpId}' from MUS to MIDI  (WAD: '${wadId}').`, { musDataPosition });\n    }\n\n    postMessage({\n        status: 'done',\n        wadId,\n        lumpId,\n        midi: masterOutput,\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}]);